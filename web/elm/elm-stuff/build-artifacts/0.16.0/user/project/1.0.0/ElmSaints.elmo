Elm.ElmSaints = Elm.ElmSaints || {};
Elm.ElmSaints.make = function (_elm) {
   "use strict";
   _elm.ElmSaints = _elm.ElmSaints || {};
   if (_elm.ElmSaints.values) return _elm.ElmSaints.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var donorLists = Elm.Native.Port.make(_elm).inboundSignal("donorLists",
   "ElmSaints.Model",
   function (v) {
      return typeof v === "object" && v instanceof Array ? Elm.Native.List.make(_elm).fromArray(v.map(function (v) {
         return typeof v === "object" && "id" in v && "title" in v && "firstName" in v && "middleName" in v && "lastName" in v && "nameExt" in v ? {_: {}
                                                                                                                                                   ,id: typeof v.id === "number" && isFinite(v.id) && Math.floor(v.id) === v.id ? v.id : _U.badPort("an integer",
                                                                                                                                                   v.id)
                                                                                                                                                   ,title: typeof v.title === "string" || typeof v.title === "object" && v.title instanceof String ? v.title : _U.badPort("a string",
                                                                                                                                                   v.title)
                                                                                                                                                   ,firstName: typeof v.firstName === "string" || typeof v.firstName === "object" && v.firstName instanceof String ? v.firstName : _U.badPort("a string",
                                                                                                                                                   v.firstName)
                                                                                                                                                   ,middleName: typeof v.middleName === "string" || typeof v.middleName === "object" && v.middleName instanceof String ? v.middleName : _U.badPort("a string",
                                                                                                                                                   v.middleName)
                                                                                                                                                   ,lastName: typeof v.lastName === "string" || typeof v.lastName === "object" && v.lastName instanceof String ? v.lastName : _U.badPort("a string",
                                                                                                                                                   v.lastName)
                                                                                                                                                   ,nameExt: typeof v.nameExt === "string" || typeof v.nameExt === "object" && v.nameExt instanceof String ? v.nameExt : _U.badPort("a string",
                                                                                                                                                   v.nameExt)} : _U.badPort("an object with fields `id`, `title`, `firstName`, `middleName`, `lastName`, `nameExt`",
         v);
      })) : _U.badPort("an array",v);
   });
   var fullNameText = function (d) {
      return $Html.text(A2($String.join,
      " ",
      _U.list([d.title
              ,d.firstName
              ,d.middleName
              ,d.lastName
              ,d.nameExt
              ,"("
              ,$Basics.toString(d.id)
              ,")"])));
   };
   var oneDonor = F2(function (address,donor) {
      return A2($Html.tr,
      _U.list([]),
      _U.list([A2($Html.td,
      _U.list([]),
      _U.list([fullNameText(donor)]))]));
   });
   var donorTable = F2(function (address,model) {
      return A2($Html.table,
      _U.list([$Html$Attributes.$class("table")]),
      _U.list([A2($Html.tbody,
      _U.list([]),
      A2($List.map,oneDonor(address),model))]));
   });
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "NoOp": var foo = A2($Debug.log,"UPDATE ACTION: ","NoOp");
           return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "First": var foo = A2($Debug.log,
           "UPDATE ACTION: ",
           "First");
           return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "Last": var foo = A2($Debug.log,"UPDATE ACTION: ","Last");
           return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "Prev": var foo = A2($Debug.log,"UPDATE ACTION: ","Prev");
           return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "Next": var foo = A2($Debug.log,"UPDATE ACTION: ","Next");
           return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         case "UpdateFindDonor": var foo = A2($Debug.log,
           "FIND THESE: ",
           _p0._0);
           return {ctor: "_Tuple2",_0: model,_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: _p0._0,_1: $Effects.none};}
   });
   var UpdateFindDonor = function (a) {
      return {ctor: "UpdateFindDonor",_0: a};
   };
   var findDonor = F2(function (address,model) {
      return A2($Html.input,
      _U.list([$Html$Attributes.id("find-donor")
              ,$Html$Attributes.placeholder("Find by Last Name ")
              ,$Html$Attributes.autofocus(true)
              ,$Html$Attributes.name("findDonor")
              ,A3($Html$Events.on,
              "input",
              $Html$Events.targetValue,
              function (_p1) {
                 return A2($Signal.message,address,UpdateFindDonor(_p1));
              })]),
      _U.list([]));
   });
   var Next = {ctor: "Next"};
   var Prev = {ctor: "Prev"};
   var Last = {ctor: "Last"};
   var First = {ctor: "First"};
   var basicNav = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2($Html.button,
              _U.list([A2($Html$Events.onClick,address,Prev)]),
              _U.list([$Html.text("Prev")]))
              ,A2($Html.button,
              _U.list([A2($Html$Events.onClick,address,First)]),
              _U.list([$Html.text("First")]))
              ,A2($Html.button,
              _U.list([A2($Html$Events.onClick,address,Last)]),
              _U.list([$Html.text("Last")]))
              ,A2($Html.button,
              _U.list([A2($Html$Events.onClick,address,Next)]),
              _U.list([$Html.text("Next")]))
              ,A2(findDonor,address,model)]));
   });
   var view = F2(function (address,model) {
      return A2($Html.div,
      _U.list([]),
      _U.list([A2(basicNav,address,model)
              ,A2(donorTable,address,model)]));
   });
   var SetDonors = function (a) {
      return {ctor: "SetDonors",_0: a};
   };
   var incomingActions = A2($Signal.map,SetDonors,donorLists);
   var NoOp = {ctor: "NoOp"};
   var init = {ctor: "_Tuple2",_0: _U.list([]),_1: $Effects.none};
   var Donor = F6(function (a,b,c,d,e,f) {
      return {id: a
             ,title: b
             ,firstName: c
             ,middleName: d
             ,lastName: e
             ,nameExt: f};
   });
   var app = $StartApp.start({init: init
                             ,update: update
                             ,view: view
                             ,inputs: _U.list([incomingActions])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",
   app.tasks);
   return _elm.ElmSaints.values = {_op: _op
                                  ,app: app
                                  ,main: main
                                  ,Donor: Donor
                                  ,init: init
                                  ,NoOp: NoOp
                                  ,SetDonors: SetDonors
                                  ,First: First
                                  ,Last: Last
                                  ,Prev: Prev
                                  ,Next: Next
                                  ,UpdateFindDonor: UpdateFindDonor
                                  ,update: update
                                  ,view: view
                                  ,basicNav: basicNav
                                  ,findDonor: findDonor
                                  ,donorTable: donorTable
                                  ,oneDonor: oneDonor
                                  ,fullNameText: fullNameText
                                  ,incomingActions: incomingActions};
};